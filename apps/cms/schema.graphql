# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type user {
  id: ID!
  name: String
  email: String
  password: PasswordState
  orders(
    where: orderWhereInput! = {}
    orderBy: [orderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [order!]
  ordersCount(where: orderWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input userWhereUniqueInput {
  id: ID
  email: String
}

input userWhereInput {
  AND: [userWhereInput!]
  OR: [userWhereInput!]
  NOT: [userWhereInput!]
  id: IDFilter
  email: StringFilter
  orders: orderManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input orderManyRelationFilter {
  every: orderWhereInput
  some: orderWhereInput
  none: orderWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input userOrderByInput {
  id: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input userUpdateInput {
  email: String
  password: String
  orders: orderRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input orderRelateToManyForUpdateInput {
  disconnect: [orderWhereUniqueInput!]
  set: [orderWhereUniqueInput!]
  create: [orderCreateInput!]
  connect: [orderWhereUniqueInput!]
}

input userUpdateArgs {
  where: userWhereUniqueInput!
  data: userUpdateInput!
}

input userCreateInput {
  email: String
  password: String
  orders: orderRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input orderRelateToManyForCreateInput {
  create: [orderCreateInput!]
  connect: [orderWhereUniqueInput!]
}

type order {
  id: ID!
  name: String
  totalPrice: Int
  isProccessed: Boolean
  user: user
  address: String
  zipCode: String
  country: String
  archived: Boolean
  orderItems(
    where: orderItemWhereInput! = {}
    orderBy: [orderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [orderItem!]
  orderItemsCount(where: orderItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input orderWhereUniqueInput {
  id: ID
}

input orderWhereInput {
  AND: [orderWhereInput!]
  OR: [orderWhereInput!]
  NOT: [orderWhereInput!]
  id: IDFilter
  isProccessed: BooleanFilter
  user: userWhereInput
  address: StringFilter
  zipCode: StringFilter
  country: StringFilter
  archived: BooleanFilter
  orderItems: orderItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input orderItemManyRelationFilter {
  every: orderItemWhereInput
  some: orderItemWhereInput
  none: orderItemWhereInput
}

input orderOrderByInput {
  id: OrderDirection
  isProccessed: OrderDirection
  address: OrderDirection
  zipCode: OrderDirection
  country: OrderDirection
  archived: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input orderUpdateInput {
  isProccessed: Boolean
  user: userRelateToOneForUpdateInput
  address: String
  zipCode: String
  country: String
  archived: Boolean
  orderItems: orderItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input userRelateToOneForUpdateInput {
  create: userCreateInput
  connect: userWhereUniqueInput
  disconnect: Boolean
}

input orderItemRelateToManyForUpdateInput {
  disconnect: [orderItemWhereUniqueInput!]
  set: [orderItemWhereUniqueInput!]
  create: [orderItemCreateInput!]
  connect: [orderItemWhereUniqueInput!]
}

input orderUpdateArgs {
  where: orderWhereUniqueInput!
  data: orderUpdateInput!
}

input orderCreateInput {
  isProccessed: Boolean
  user: userRelateToOneForCreateInput
  address: String
  zipCode: String
  country: String
  archived: Boolean
  orderItems: orderItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input userRelateToOneForCreateInput {
  create: userCreateInput
  connect: userWhereUniqueInput
}

input orderItemRelateToManyForCreateInput {
  create: [orderItemCreateInput!]
  connect: [orderItemWhereUniqueInput!]
}

type orderItem {
  id: ID!
  name: String
  totalPrice: Int
  amount: Int
  itemPrice: Int
  order: order
  stockItem: stockItem
  createdAt: DateTime
  updatedAt: DateTime
}

input orderItemWhereUniqueInput {
  id: ID
}

input orderItemWhereInput {
  AND: [orderItemWhereInput!]
  OR: [orderItemWhereInput!]
  NOT: [orderItemWhereInput!]
  id: IDFilter
  amount: IntFilter
  order: orderWhereInput
  stockItem: stockItemWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input orderItemOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input orderItemUpdateInput {
  amount: Int
  order: orderRelateToOneForUpdateInput
  stockItem: stockItemRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input orderRelateToOneForUpdateInput {
  create: orderCreateInput
  connect: orderWhereUniqueInput
  disconnect: Boolean
}

input stockItemRelateToOneForUpdateInput {
  create: stockItemCreateInput
  connect: stockItemWhereUniqueInput
  disconnect: Boolean
}

input orderItemUpdateArgs {
  where: orderItemWhereUniqueInput!
  data: orderItemUpdateInput!
}

input orderItemCreateInput {
  amount: Int
  order: orderRelateToOneForCreateInput
  stockItem: stockItemRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input orderRelateToOneForCreateInput {
  create: orderCreateInput
  connect: orderWhereUniqueInput
}

input stockItemRelateToOneForCreateInput {
  create: stockItemCreateInput
  connect: stockItemWhereUniqueInput
}

type product {
  id: ID!
  name: String
  description: String
  price: Int
  stockItems(
    where: stockItemWhereInput! = {}
    orderBy: [stockItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stockItem!]
  stockItemsCount(where: stockItemWhereInput! = {}): Int
  images(
    where: imageWhereInput! = {}
    orderBy: [imageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [image!]
  imagesCount(where: imageWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input productWhereUniqueInput {
  id: ID
  name: String
}

input productWhereInput {
  AND: [productWhereInput!]
  OR: [productWhereInput!]
  NOT: [productWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: IntFilter
  stockItems: stockItemManyRelationFilter
  images: imageManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input stockItemManyRelationFilter {
  every: stockItemWhereInput
  some: stockItemWhereInput
  none: stockItemWhereInput
}

input imageManyRelationFilter {
  every: imageWhereInput
  some: imageWhereInput
  none: imageWhereInput
}

input productOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input productUpdateInput {
  name: String
  description: String
  price: Int
  stockItems: stockItemRelateToManyForUpdateInput
  images: imageRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input stockItemRelateToManyForUpdateInput {
  disconnect: [stockItemWhereUniqueInput!]
  set: [stockItemWhereUniqueInput!]
  create: [stockItemCreateInput!]
  connect: [stockItemWhereUniqueInput!]
}

input imageRelateToManyForUpdateInput {
  disconnect: [imageWhereUniqueInput!]
  set: [imageWhereUniqueInput!]
  create: [imageCreateInput!]
  connect: [imageWhereUniqueInput!]
}

input productUpdateArgs {
  where: productWhereUniqueInput!
  data: productUpdateInput!
}

input productCreateInput {
  name: String
  description: String
  price: Int
  stockItems: stockItemRelateToManyForCreateInput
  images: imageRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input stockItemRelateToManyForCreateInput {
  create: [stockItemCreateInput!]
  connect: [stockItemWhereUniqueInput!]
}

input imageRelateToManyForCreateInput {
  create: [imageCreateInput!]
  connect: [imageWhereUniqueInput!]
}

type stock {
  id: ID!
  name: String
  address: String
  zipCode: String
  country: String
  stockItems(
    where: stockItemWhereInput! = {}
    orderBy: [stockItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stockItem!]
  stockItemsCount(where: stockItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input stockWhereUniqueInput {
  id: ID
  name: String
}

input stockWhereInput {
  AND: [stockWhereInput!]
  OR: [stockWhereInput!]
  NOT: [stockWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  zipCode: StringFilter
  country: StringFilter
  stockItems: stockItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input stockOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  zipCode: OrderDirection
  country: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input stockUpdateInput {
  name: String
  address: String
  zipCode: String
  country: String
  stockItems: stockItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input stockUpdateArgs {
  where: stockWhereUniqueInput!
  data: stockUpdateInput!
}

input stockCreateInput {
  name: String
  address: String
  zipCode: String
  country: String
  stockItems: stockItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type stockItem {
  id: ID!
  name: String
  amount: Int
  stock: stock
  itemPrice: Int
  isSoldOut: Boolean
  product: product
  orderItems(
    where: orderItemWhereInput! = {}
    orderBy: [orderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [orderItem!]
  orderItemsCount(where: orderItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input stockItemWhereUniqueInput {
  id: ID
}

input stockItemWhereInput {
  AND: [stockItemWhereInput!]
  OR: [stockItemWhereInput!]
  NOT: [stockItemWhereInput!]
  id: IDFilter
  amount: IntFilter
  stock: stockWhereInput
  product: productWhereInput
  orderItems: orderItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input stockItemOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input stockItemUpdateInput {
  amount: Int
  stock: stockRelateToOneForUpdateInput
  product: productRelateToOneForUpdateInput
  orderItems: orderItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input stockRelateToOneForUpdateInput {
  create: stockCreateInput
  connect: stockWhereUniqueInput
  disconnect: Boolean
}

input productRelateToOneForUpdateInput {
  create: productCreateInput
  connect: productWhereUniqueInput
  disconnect: Boolean
}

input stockItemUpdateArgs {
  where: stockItemWhereUniqueInput!
  data: stockItemUpdateInput!
}

input stockItemCreateInput {
  amount: Int
  stock: stockRelateToOneForCreateInput
  product: productRelateToOneForCreateInput
  orderItems: orderItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input stockRelateToOneForCreateInput {
  create: stockCreateInput
  connect: stockWhereUniqueInput
}

input productRelateToOneForCreateInput {
  create: productCreateInput
  connect: productWhereUniqueInput
}

type image {
  id: ID!
  name: String
  image: ImageFieldOutput
  product: product
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input imageWhereUniqueInput {
  id: ID
}

input imageWhereInput {
  AND: [imageWhereInput!]
  OR: [imageWhereInput!]
  NOT: [imageWhereInput!]
  id: IDFilter
  product: productWhereInput
}

input imageOrderByInput {
  id: OrderDirection
}

input imageUpdateInput {
  image: ImageFieldInput
  product: productRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input imageUpdateArgs {
  where: imageWhereUniqueInput!
  data: imageUpdateInput!
}

input imageCreateInput {
  image: ImageFieldInput
  product: productRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createuser(data: userCreateInput!): user
  createUsers(data: [userCreateInput!]!): [user]
  updateuser(where: userWhereUniqueInput!, data: userUpdateInput!): user
  updateUsers(data: [userUpdateArgs!]!): [user]
  deleteuser(where: userWhereUniqueInput!): user
  deleteUsers(where: [userWhereUniqueInput!]!): [user]
  createorder(data: orderCreateInput!): order
  createOrders(data: [orderCreateInput!]!): [order]
  updateorder(where: orderWhereUniqueInput!, data: orderUpdateInput!): order
  updateOrders(data: [orderUpdateArgs!]!): [order]
  deleteorder(where: orderWhereUniqueInput!): order
  deleteOrders(where: [orderWhereUniqueInput!]!): [order]
  createorderItem(data: orderItemCreateInput!): orderItem
  createOrderItems(data: [orderItemCreateInput!]!): [orderItem]
  updateorderItem(
    where: orderItemWhereUniqueInput!
    data: orderItemUpdateInput!
  ): orderItem
  updateOrderItems(data: [orderItemUpdateArgs!]!): [orderItem]
  deleteorderItem(where: orderItemWhereUniqueInput!): orderItem
  deleteOrderItems(where: [orderItemWhereUniqueInput!]!): [orderItem]
  createproduct(data: productCreateInput!): product
  createProducts(data: [productCreateInput!]!): [product]
  updateproduct(
    where: productWhereUniqueInput!
    data: productUpdateInput!
  ): product
  updateProducts(data: [productUpdateArgs!]!): [product]
  deleteproduct(where: productWhereUniqueInput!): product
  deleteProducts(where: [productWhereUniqueInput!]!): [product]
  createstock(data: stockCreateInput!): stock
  createStocks(data: [stockCreateInput!]!): [stock]
  updatestock(where: stockWhereUniqueInput!, data: stockUpdateInput!): stock
  updateStocks(data: [stockUpdateArgs!]!): [stock]
  deletestock(where: stockWhereUniqueInput!): stock
  deleteStocks(where: [stockWhereUniqueInput!]!): [stock]
  createstockItem(data: stockItemCreateInput!): stockItem
  createStockItems(data: [stockItemCreateInput!]!): [stockItem]
  updatestockItem(
    where: stockItemWhereUniqueInput!
    data: stockItemUpdateInput!
  ): stockItem
  updateStockItems(data: [stockItemUpdateArgs!]!): [stockItem]
  deletestockItem(where: stockItemWhereUniqueInput!): stockItem
  deleteStockItems(where: [stockItemWhereUniqueInput!]!): [stockItem]
  createimage(data: imageCreateInput!): image
  createImages(data: [imageCreateInput!]!): [image]
  updateimage(where: imageWhereUniqueInput!, data: imageUpdateInput!): image
  updateImages(data: [imageUpdateArgs!]!): [image]
  deleteimage(where: imageWhereUniqueInput!): image
  deleteImages(where: [imageWhereUniqueInput!]!): [image]
}

type Query {
  users(
    where: userWhereInput! = {}
    orderBy: [userOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [user!]
  user(where: userWhereUniqueInput!): user
  usersCount(where: userWhereInput! = {}): Int
  orders(
    where: orderWhereInput! = {}
    orderBy: [orderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [order!]
  order(where: orderWhereUniqueInput!): order
  ordersCount(where: orderWhereInput! = {}): Int
  orderItems(
    where: orderItemWhereInput! = {}
    orderBy: [orderItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [orderItem!]
  orderItem(where: orderItemWhereUniqueInput!): orderItem
  orderItemsCount(where: orderItemWhereInput! = {}): Int
  products(
    where: productWhereInput! = {}
    orderBy: [productOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [product!]
  product(where: productWhereUniqueInput!): product
  productsCount(where: productWhereInput! = {}): Int
  stocks(
    where: stockWhereInput! = {}
    orderBy: [stockOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stock!]
  stock(where: stockWhereUniqueInput!): stock
  stocksCount(where: stockWhereInput! = {}): Int
  stockItems(
    where: stockItemWhereInput! = {}
    orderBy: [stockItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stockItem!]
  stockItem(where: stockItemWhereUniqueInput!): stockItem
  stockItemsCount(where: stockItemWhereInput! = {}): Int
  images(
    where: imageWhereInput! = {}
    orderBy: [imageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [image!]
  image(where: imageWhereUniqueInput!): image
  imagesCount(where: imageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
